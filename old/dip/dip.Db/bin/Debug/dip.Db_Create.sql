/*
Deployment script for dip.Db

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "dip.Db"
:setvar DefaultFilePrefix "dip.Db"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [map]...';


GO
CREATE SCHEMA [map]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [logs]...';


GO
CREATE SCHEMA [logs]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [enum]...';


GO
CREATE SCHEMA [enum]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dict]...';


GO
CREATE SCHEMA [dict]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [conf]...';


GO
CREATE SCHEMA [conf]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [auth]...';


GO
CREATE SCHEMA [auth]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dbo].[Days]...';


GO
CREATE TABLE [dbo].[Days] (
    [Id]                INT      IDENTITY (1, 1) NOT NULL,
    [UserCountryVisaId] INT      NOT NULL,
    [Days]              INT      NOT NULL,
    [DateStart]         DATETIME NULL,
    [DateEnd]           DATETIME NULL,
    CONSTRAINT [PK_Days] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserTrackingSchedule]...';


GO
CREATE TABLE [dbo].[UserTrackingSchedule] (
    [Id]             INT      IDENTITY (1, 1) NOT NULL,
    [UserId]         INT      NOT NULL,
    [ScheduledHours] INT      NOT NULL,
    [ScheduledDays]  INT      NOT NULL,
    [LastRun]        DATETIME NULL,
    [CreatedOn]      DATETIME NULL,
    [ModifiedOn]     DATETIME NULL,
    CONSTRAINT [PK_UserTrackingSchedule] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [map].[UserCountryVisa]...';


GO
CREATE TABLE [map].[UserCountryVisa] (
    [Id]                INT      IDENTITY (1, 1) NOT NULL,
    [UserId]            INT      NOT NULL,
    [VisaTypeId]        INT      NOT NULL,
    [AllowNotification] BIT      NULL,
    [CreatedOn]         DATETIME NULL,
    [ModifiedOn]        DATETIME NULL,
    CONSTRAINT [PK_UserCountry] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [logs].[Log]...';


GO
CREATE TABLE [logs].[Log] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [UserId]     INT            NULL,
    [ActionType] INT            NOT NULL,
    [PageUrl]    NVARCHAR (255) NOT NULL,
    [OccurredOn] DATETIME       NOT NULL,
    CONSTRAINT [PK_Log] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [logs].[Error]...';


GO
CREATE TABLE [logs].[Error] (
    [Id]           INT             IDENTITY (1, 1) NOT NULL,
    [UserId]       INT             NULL,
    [ErrorCode]    BIGINT          NULL,
    [ErrorMessage] NVARCHAR (1024) NULL,
    [StackTrace]   NVARCHAR (MAX)  NULL,
    [CreatedOn]    DATETIME        NOT NULL,
    [ModifiedOn]   DATETIME        NOT NULL,
    CONSTRAINT [PK_Error] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [enum].[LogActionType]...';


GO
CREATE TABLE [enum].[LogActionType] (
    [Id]   INT           NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_LogActionType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dict].[CountryVisaType]...';


GO
CREATE TABLE [dict].[CountryVisaType] (
    [Id]            INT             IDENTITY (1, 1) NOT NULL,
    [CountryId]     INT             NOT NULL,
    [Name]          NVARCHAR (255)  NOT NULL,
    [Code]          NVARCHAR (50)   NOT NULL,
    [Description]   NVARCHAR (1024) NULL,
    [CountFirstDay] BIT             NULL,
    [CountLastDay]  BIT             NULL,
    [TargetDays]    INT             NOT NULL,
    [SpecialTime]   NVARCHAR (10)   NULL,
    CONSTRAINT [PK_CountryVisaType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dict].[CountryFinancialPeriod]...';


GO
CREATE TABLE [dict].[CountryFinancialPeriod] (
    [Id]        INT      IDENTITY (1, 1) NOT NULL,
    [CountryId] INT      NOT NULL,
    [DateStart] DATETIME NULL,
    [DateEnd]   DATETIME NULL,
    CONSTRAINT [PK_CountryFinancialPeriod] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dict].[Country]...';


GO
CREATE TABLE [dict].[Country] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (255) NOT NULL,
    [Code]       NVARCHAR (5)   NOT NULL,
    [CreatedOn]  DATETIME       NULL,
    [ModifiedOn] DATETIME       NULL,
    CONSTRAINT [PK_Country] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [conf].[Settings]...';


GO
CREATE TABLE [conf].[Settings] (
    [Id]         INT             IDENTITY (1, 1) NOT NULL,
    [Key]        NVARCHAR (255)  NOT NULL,
    [Value]      NVARCHAR (1024) NULL,
    [CreatedOn]  DATETIME        NULL,
    [ModifiedOn] DATETIME        NULL,
    CONSTRAINT [PK_AppSettings] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [auth].[User]...';


GO
CREATE TABLE [auth].[User] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Email]       NVARCHAR (255) NOT NULL,
    [Password]    NVARCHAR (255) NOT NULL,
    [FirstName]   NVARCHAR (255) NULL,
    [LastName]    NVARCHAR (255) NULL,
    [MiddleName]  NVARCHAR (255) NULL,
    [Photo]       IMAGE          NULL,
    [PhoneNumber] NVARCHAR (50)  NULL,
    [Status]      BIT            NOT NULL,
    [CreatedOn]   DATETIME       NOT NULL,
    [ModifiedOn]  DATETIME       NOT NULL,
    [LastLoginOn] DATETIME       NULL,
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DF_UserTrackingSchedule_PeriodHours]...';


GO
ALTER TABLE [dbo].[UserTrackingSchedule]
    ADD CONSTRAINT [DF_UserTrackingSchedule_PeriodHours] DEFAULT ((1)) FOR [ScheduledHours];


GO
PRINT N'Creating [dbo].[DF_UserTrackingSchedule_PeriodDays]...';


GO
ALTER TABLE [dbo].[UserTrackingSchedule]
    ADD CONSTRAINT [DF_UserTrackingSchedule_PeriodDays] DEFAULT ((1)) FOR [ScheduledDays];


GO
PRINT N'Creating [dbo].[DF_UserTrackingSchedule_CreatedOn]...';


GO
ALTER TABLE [dbo].[UserTrackingSchedule]
    ADD CONSTRAINT [DF_UserTrackingSchedule_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [dbo].[DF_UserTrackingSchedule_ModifiedOn]...';


GO
ALTER TABLE [dbo].[UserTrackingSchedule]
    ADD CONSTRAINT [DF_UserTrackingSchedule_ModifiedOn] DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating [logs].[DF_Log_ActionType]...';


GO
ALTER TABLE [logs].[Log]
    ADD CONSTRAINT [DF_Log_ActionType] DEFAULT ((0)) FOR [ActionType];


GO
PRINT N'Creating [logs].[DF_Log_OccurredOn]...';


GO
ALTER TABLE [logs].[Log]
    ADD CONSTRAINT [DF_Log_OccurredOn] DEFAULT (getdate()) FOR [OccurredOn];


GO
PRINT N'Creating [logs].[DF_Error_CreatedOn]...';


GO
ALTER TABLE [logs].[Error]
    ADD CONSTRAINT [DF_Error_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [logs].[DF_Error_ModifiedOn]...';


GO
ALTER TABLE [logs].[Error]
    ADD CONSTRAINT [DF_Error_ModifiedOn] DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating [dict].[DF_CountryVisaType_TargetDays]...';


GO
ALTER TABLE [dict].[CountryVisaType]
    ADD CONSTRAINT [DF_CountryVisaType_TargetDays] DEFAULT ((190)) FOR [TargetDays];


GO
PRINT N'Creating [dict].[DF_Country_CreatedOn]...';


GO
ALTER TABLE [dict].[Country]
    ADD CONSTRAINT [DF_Country_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [dict].[DF_Country_ModifiedOn]...';


GO
ALTER TABLE [dict].[Country]
    ADD CONSTRAINT [DF_Country_ModifiedOn] DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating [conf].[DF_AppSettings_CreatedOn]...';


GO
ALTER TABLE [conf].[Settings]
    ADD CONSTRAINT [DF_AppSettings_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [conf].[DF_AppSettings_ModifiedOn]...';


GO
ALTER TABLE [conf].[Settings]
    ADD CONSTRAINT [DF_AppSettings_ModifiedOn] DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating [auth].[DF_User_Status]...';


GO
ALTER TABLE [auth].[User]
    ADD CONSTRAINT [DF_User_Status] DEFAULT ((1)) FOR [Status];


GO
PRINT N'Creating [auth].[DF_User_CreatedOn]...';


GO
ALTER TABLE [auth].[User]
    ADD CONSTRAINT [DF_User_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [auth].[DF_User_ModifiedOn]...';


GO
ALTER TABLE [auth].[User]
    ADD CONSTRAINT [DF_User_ModifiedOn] DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating [dbo].[FK_Days_UserCountryVisa]...';


GO
ALTER TABLE [dbo].[Days]
    ADD CONSTRAINT [FK_Days_UserCountryVisa] FOREIGN KEY ([UserCountryVisaId]) REFERENCES [map].[UserCountryVisa] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UserTrackingSchedule_User]...';


GO
ALTER TABLE [dbo].[UserTrackingSchedule]
    ADD CONSTRAINT [FK_UserTrackingSchedule_User] FOREIGN KEY ([UserId]) REFERENCES [auth].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [map].[FK_UserCountryVisa_CountryVisaType]...';


GO
ALTER TABLE [map].[UserCountryVisa]
    ADD CONSTRAINT [FK_UserCountryVisa_CountryVisaType] FOREIGN KEY ([VisaTypeId]) REFERENCES [dict].[CountryVisaType] ([Id]) NOT FOR REPLICATION;


GO
ALTER TABLE [map].[UserCountryVisa] NOCHECK CONSTRAINT [FK_UserCountryVisa_CountryVisaType];


GO
PRINT N'Creating [map].[FK_UserCountryVisa_User]...';


GO
ALTER TABLE [map].[UserCountryVisa]
    ADD CONSTRAINT [FK_UserCountryVisa_User] FOREIGN KEY ([UserId]) REFERENCES [auth].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [logs].[FK_Log_LogActionType]...';


GO
ALTER TABLE [logs].[Log]
    ADD CONSTRAINT [FK_Log_LogActionType] FOREIGN KEY ([ActionType]) REFERENCES [enum].[LogActionType] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [logs].[FK_Log_User]...';


GO
ALTER TABLE [logs].[Log]
    ADD CONSTRAINT [FK_Log_User] FOREIGN KEY ([UserId]) REFERENCES [auth].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [logs].[FK_Error_User]...';


GO
ALTER TABLE [logs].[Error]
    ADD CONSTRAINT [FK_Error_User] FOREIGN KEY ([UserId]) REFERENCES [auth].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dict].[FK_CountryVisaType_Country]...';


GO
ALTER TABLE [dict].[CountryVisaType]
    ADD CONSTRAINT [FK_CountryVisaType_Country] FOREIGN KEY ([CountryId]) REFERENCES [dict].[Country] ([Id]) NOT FOR REPLICATION;


GO
ALTER TABLE [dict].[CountryVisaType] NOCHECK CONSTRAINT [FK_CountryVisaType_Country];


GO
PRINT N'Creating [dict].[FK_CountryFinancialPeriod_Country]...';


GO
ALTER TABLE [dict].[CountryFinancialPeriod]
    ADD CONSTRAINT [FK_CountryFinancialPeriod_Country] FOREIGN KEY ([CountryId]) REFERENCES [dict].[Country] ([Id]) NOT FOR REPLICATION;


GO
ALTER TABLE [dict].[CountryFinancialPeriod] NOCHECK CONSTRAINT [FK_CountryFinancialPeriod_Country];


GO
PRINT N'Creating [logs].[Error_AddEdit]...';


GO
CREATE PROCEDURE [logs].[Error_AddEdit]
		   @Id int = null
		  ,@UserId int = null
		  ,@ErrorCode bigint = null
		  ,@ErrorMessage nvarchar(1024) = null
		  ,@StackTrace nvarchar(max) = null
		  ,@CreatedOn datetime = null
		  ,@ModifiedOn datetime = null
AS
BEGIN
	SET NOCOUNT ON;

    IF EXISTS(SELECT 1 FROM [logs].[Error] WHERE UserId = @UserId and (ErrorCode = @ErrorCode or ErrorMessage = @ErrorMessage))
	BEGIN

	-- Update if exists
	   UPDATE [logs].[Error]
	   SET StackTrace = @StackTrace
		  ,ModifiedOn = getdate()
	   WHERE UserId = @UserId and (ErrorCode = @ErrorCode or ErrorMessage = @ErrorMessage)

	END
    ELSE
    BEGIN

		-- Create a new record
		INSERT INTO [logs].[Error]
           ([UserId]
           ,[ErrorCode]
           ,[ErrorMessage]
           ,[StackTrace]
           ,[CreatedOn]
           ,[ModifiedOn])
     VALUES
           (@UserId
           ,@ErrorCode
           ,@ErrorMessage
           ,@StackTrace
           ,ISNULL(@CreatedOn, GETDATE())
		   ,ISNULL(@ModifiedOn, GETDATE()))

	END
END
GO
PRINT N'Creating [logs].[Log_AddEdit]...';


GO
CREATE PROCEDURE [logs].[Log_AddEdit]
		   @Id int = null
		  ,@UserId int = null
		  ,@ActionType int = 0
		  ,@PageUrl nvarchar(255)
		  ,@OccurredOn datetime = null
AS
BEGIN
	SET NOCOUNT ON;

		-- Create a new record
		INSERT INTO [logs].[Log]
           ([UserId]
           ,[ActionType]
           ,[PageUrl]
           ,[OccurredOn])
     VALUES
           (@UserId
           ,@ActionType
           ,@PageUrl
           ,ISNULL(@OccurredOn, GETDATE()))

END
GO
PRINT N'Creating [conf].[Settings_GetByKey]...';


GO
CREATE PROCEDURE [conf].[Settings_GetByKey]
				@Key			   nvarchar(255)
			  , @Xml			   XML output
AS
BEGIN
	SET NOCOUNT ON;
	
	SET @Xml = (SELECT (SELECT	   setting.[Id]
								  ,setting.[Key]
								  ,setting.[Value]
								  ,setting.[CreatedOn]
								  ,setting.[ModifiedOn]
						FROM [conf].[Settings] AS setting
						WHERE setting.[Key] = @Key
						FOR XML RAW('Setting'), TYPE)
				FOR XML PATH('Settings'),TYPE)

END
GO
PRINT N'Creating [conf].[Settings_List]...';


GO
CREATE PROCEDURE [conf].[Settings_List]
				@Xml		   XML output
AS
BEGIN
	SET NOCOUNT ON;
	
	SET @Xml = (SELECT (SELECT	   setting.[Id]
								  ,setting.[Key]
								  ,setting.[Value]
								  ,setting.[CreatedOn]
								  ,setting.[ModifiedOn]
						FROM [conf].[Settings] AS setting
						ORDER BY setting.[Key] asc
						FOR XML RAW('Settings'), TYPE)
				FOR XML PATH('Settings'),TYPE)

END
GO
PRINT N'Creating [auth].[User_Login]...';


GO

CREATE PROCEDURE [auth].[User_Login]
				@Email	       nvarchar(255)
			  , @Password	   nvarchar(255)
			  , @Xml		   XML output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @ID INT

	SELECT @ID = usr.[Id]
	  FROM [auth].[User] as usr
	WHERE usr.[Email] = @Email and usr.[Password] = @Password and usr.[Status] = 1
	
    UPDATE [auth].[User]
		SET LastLoginOn = GETDATE()
	WHERE Id = @ID

	SET @Xml = (SELECT (SELECT	   usr.[Id]
								  ,usr.[Email]
								  ,usr.[Password]
								  ,usr.[FirstName]
								  ,usr.[LastName]
								  ,usr.[MiddleName]
								  ,cast(cast(usr.[Photo] as varbinary(max)) as varchar(max)) as Photo
								  ,usr.[PhoneNumber]
								  ,usr.[Status]
								  ,usr.[CreatedOn]
								  ,usr.[ModifiedOn]
								  ,usr.[LastLoginOn]
								  ,(SELECT	 
										   uts.[Id]
										  ,uts.[UserId]
										  ,uts.[ScheduledHours]
										  ,uts.[ScheduledDays]
										  ,uts.[LastRun]
										  ,uts.[CreatedOn]
										  ,uts.[ModifiedOn]
										FROM [dbo].[UserTrackingSchedule] AS uts
										WHERE uts.[UserId] = usr.[Id]
										FOR XML RAW('UserTrackingSchedule'), TYPE) 
								  ,(SELECT (SELECT	 
											   ucv.[Id]
											  ,ucv.[UserId]
											  ,ucv.[VisaTypeId]
											  ,ucv.[AllowNotification]
											  ,ucv.[CreatedOn]
											  ,ucv.[ModifiedOn]
											  ,(SELECT d.*
												FROM [dbo].[Days] AS d
												WHERE d.[UserCountryVisaId]=ucv.[Id]
												FOR XML RAW('Days'), TYPE) 
											  ,(SELECT cvt.*
													   ,(SELECT	c.*
															,(SELECT cfp.*
															  FROM [dict].[CountryFinancialPeriod] AS cfp
															  WHERE cfp.[CountryId]=c.[Id]
															  FOR XML RAW('CountryFinancialPeriod'), TYPE) 
														 FROM [dict].[Country] AS c
														 WHERE c.[Id]=cvt.[CountryId]
														 FOR XML RAW('Country'), TYPE) 
												FROM [dict].[CountryVisaType] AS cvt
												WHERE cvt.[Id]=ucv.[VisaTypeId]
											    FOR XML RAW('CountryVisaType'), TYPE) 
										FROM [map].[UserCountryVisa] AS ucv
										WHERE ucv.[UserId] = usr.[Id]
										FOR XML RAW('UserCountryVisa'), TYPE) 
								   FOR XML PATH('UserCountryVisas'),TYPE)
						FROM [auth].[User] AS usr
						WHERE usr.[Id]=@ID
						FOR XML RAW('User'), TYPE)
				FOR XML PATH('Users'),TYPE)

END
GO
PRINT N'Creating [auth].[User_AddEdit]...';


GO

CREATE PROCEDURE [auth].[User_AddEdit]
		  @Email nvarchar(255)
		  ,@Password nvarchar(255)
		  ,@FirstName nvarchar(255) = null
		  ,@LastName nvarchar(255) = null
		  ,@MiddleName nvarchar(255) = null
		  ,@Photo image = null
		  ,@PhoneNumber nvarchar(50) = null
		  ,@Status bit = 1
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ID INT = 0

	SELECT @ID = usr.[Id]
	  FROM [auth].[User] as usr
	WHERE usr.[Email] = @Email
	
	IF (@ID IS NOT NULL AND @ID <> 0)
	BEGIN
	-- Update record
	UPDATE [auth].[User]
	   SET [Email] = @Email
		  ,[FirstName] = ISNULL(@FirstName, FirstName)
		  ,[LastName] = ISNULL(@LastName, LastName)
		  ,[MiddleName] = ISNULL(@MiddleName, MiddleName)
		  ,[Password] = ISNULL(@Password, Password)
		  ,[Photo] = ISNULL(@Photo, Photo)
		  ,[PhoneNumber] = ISNULL(@PhoneNumber, PhoneNumber)
		  ,[Status] = @Status
		  ,[LastLoginOn] = GETDATE()
	 WHERE Id=@ID

	END
	ELSE
	BEGIN
	-- Create a new record
	INSERT INTO [auth].[User]
           ([Email]
		   ,[Password]
           ,[FirstName]
           ,[LastName]
           ,[MiddleName]
		   ,[Photo]
           ,[PhoneNumber]
           ,[Status]
           ,[CreatedOn]
           ,[ModifiedOn]
           ,[LastLoginOn])
     VALUES
           (@Email
		   ,@Password
           ,@FirstName
           ,@LastName
           ,@MiddleName
		   ,@Photo
           ,@PhoneNumber
           ,@Status
           , GETDATE()
           , GETDATE()
           , GETDATE())
	END

END
GO
PRINT N'Creating [auth].[User_Get]...';


GO
CREATE PROCEDURE [auth].[User_Get]
				@Id			   INT
			  , @Xml		   XML output
AS
BEGIN
	SET NOCOUNT ON;
	
	SET @Xml = (SELECT (SELECT	   usr.[Id]
								  ,usr.[Email]
								  ,usr.[Password]
								  ,usr.[FirstName]
								  ,usr.[LastName]
								  ,usr.[MiddleName]
								  ,cast(cast(usr.[Photo] as varbinary(max)) as varchar(max)) as Photo
								  ,usr.[PhoneNumber]
								  ,usr.[Status]
								  ,usr.[CreatedOn]
								  ,usr.[ModifiedOn]
								  ,usr.[LastLoginOn]
								  ,(SELECT	 
										   uts.[Id]
										  ,uts.[UserId]
										  ,uts.[ScheduledHours]
										  ,uts.[ScheduledDays]
										  ,uts.[LastRun]
										  ,uts.[CreatedOn]
										  ,uts.[ModifiedOn]
										FROM [dbo].[UserTrackingSchedule] AS uts
										WHERE uts.[UserId] = usr.[Id]
										FOR XML RAW('UserTrackingSchedule'), TYPE) 
								  ,(SELECT (SELECT	 
											   ucv.[Id]
											  ,ucv.[UserId]
											  ,ucv.[VisaTypeId]
											  ,ucv.[AllowNotification]
											  ,ucv.[CreatedOn]
											  ,ucv.[ModifiedOn]
											  ,(SELECT d.*
												FROM [dbo].[Days] AS d
												WHERE d.[UserCountryVisaId]=ucv.[Id]
												FOR XML RAW('Days'), TYPE) 
											  ,(SELECT  cvt.*
													   ,(SELECT	 c.*
															,(SELECT cfp.*
															  FROM [dict].[CountryFinancialPeriod] AS cfp
															  WHERE cfp.[CountryId]=c.[Id]
															  FOR XML RAW('CountryFinancialPeriod'), TYPE) 
														 FROM [dict].[Country] AS c
													     WHERE c.[Id]=cvt.[CountryId]
														 FOR XML RAW('Country'), TYPE) 
												FROM [dict].[CountryVisaType] AS cvt
												WHERE cvt.[Id]=ucv.[VisaTypeId]
											    FOR XML RAW('CountryVisaType'), TYPE) 
										FROM [map].[UserCountryVisa] AS ucv
										WHERE ucv.[UserId] = usr.[Id]
										FOR XML RAW('UserCountryVisa'), TYPE) 
								   FOR XML PATH('UserCountryVisas'),TYPE)
						FROM [auth].[User] AS usr
						WHERE usr.[Id]=@Id
						FOR XML RAW('User'), TYPE)
				FOR XML PATH('Users'),TYPE)

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [dict].[Country] ON 

GO
INSERT [dict].[Country] ([Id], [Name], [Code], [CreatedOn], [ModifiedOn]) VALUES (1, N'Россия', N'RU', CAST(N'2018-08-15T05:26:48.080' AS DateTime), CAST(N'2018-08-15T05:26:48.080' AS DateTime))
GO
INSERT [dict].[Country] ([Id], [Name], [Code], [CreatedOn], [ModifiedOn]) VALUES (2, N'Великобритания', N'UK', CAST(N'2018-08-15T05:27:02.630' AS DateTime), CAST(N'2018-08-15T05:27:02.630' AS DateTime))
GO
INSERT [dict].[Country] ([Id], [Name], [Code], [CreatedOn], [ModifiedOn]) VALUES (3, N'США', N'US', CAST(N'2018-08-15T05:27:13.490' AS DateTime), CAST(N'2018-08-15T05:27:13.490' AS DateTime))
GO
SET IDENTITY_INSERT [dict].[Country] OFF
GO
SET IDENTITY_INSERT [dict].[CountryVisaType] ON 

GO
INSERT [dict].[CountryVisaType] ([Id], [CountryId], [Name], [Code], [Description], [CountFirstDay], [CountLastDay], [TargetDays], [SpecialTime]) VALUES (1, 1, N'Резиденство РФ', N'RUS', N'Подсчет производится по календарному году с 1 января по 31 декабря. День вьезда и выезда считается днем, проведенным в РФ.', 1, 1, 183, NULL)
GO
INSERT [dict].[CountryVisaType] ([Id], [CountryId], [Name], [Code], [Description], [CountFirstDay], [CountLastDay], [TargetDays], [SpecialTime]) VALUES (3, 2, N'Налоговое резидентство UK (90 дней)', N'UK90', N'Подсчет дней производится по полуночам, проведенным в UK по местному времени и ведется с 6 апреля текущего года по 5 апреля следующего года.', 1, 1, 90, N'00:00:00')
GO
INSERT [dict].[CountryVisaType] ([Id], [CountryId], [Name], [Code], [Description], [CountFirstDay], [CountLastDay], [TargetDays], [SpecialTime]) VALUES (4, 2, N'Налоговое резидентство UK (120 дней)', N'UK120', N'Подсчет дней производится по полуночам, проведенным в UK по местному времени и ведется с 6 апреля текущего года по 5 апреля следующего года.', 1, 1, 120, N'00:00:00')
GO
INSERT [dict].[CountryVisaType] ([Id], [CountryId], [Name], [Code], [Description], [CountFirstDay], [CountLastDay], [TargetDays], [SpecialTime]) VALUES (5, 2, N'Налоговое резидентство UK (180 дней)', N'UK180', N'Подсчет дней производится по полуночам, проведенным в UK по местному времени и ведется с 6 апреля текущего года по 5 апреля следующего года.', 1, 1, 180, N'00:00:00')
GO
SET IDENTITY_INSERT [dict].[CountryVisaType] OFF
GO
SET IDENTITY_INSERT [auth].[User] ON 

GO
INSERT [auth].[User] ([Id], [Email], [Password], [FirstName], [LastName], [MiddleName], [Photo], [PhoneNumber], [Status], [CreatedOn], [ModifiedOn], [LastLoginOn]) VALUES (1, N'smetaninatv@yandex.ru', N'1', N'Татьяна', N'Сметанина', NULL, NULL, N'+79031222341', 1, CAST(N'2018-08-12T12:40:26.357' AS DateTime), CAST(N'2018-08-12T12:40:26.357' AS DateTime), CAST(N'2018-08-15T07:53:18.893' AS DateTime))
GO
SET IDENTITY_INSERT [auth].[User] OFF
GO
SET IDENTITY_INSERT [map].[UserCountryVisa] ON 

GO
INSERT [map].[UserCountryVisa] ([Id], [UserId], [VisaTypeId], [AllowNotification], [CreatedOn], [ModifiedOn]) VALUES (1, 1, 1, 1, NULL, NULL)
GO
INSERT [map].[UserCountryVisa] ([Id], [UserId], [VisaTypeId], [AllowNotification], [CreatedOn], [ModifiedOn]) VALUES (2, 1, 2, 1, NULL, NULL)
GO
SET IDENTITY_INSERT [map].[UserCountryVisa] OFF
GO
SET IDENTITY_INSERT [dbo].[UserTrackingSchedule] ON 

GO
INSERT [dbo].[UserTrackingSchedule] ([Id], [UserId], [ScheduledHours], [ScheduledDays], [LastRun], [CreatedOn], [ModifiedOn]) VALUES (1, 1, 4, 1, CAST(N'2018-08-12T12:00:00.000' AS DateTime), CAST(N'2018-08-12T13:06:50.730' AS DateTime), CAST(N'2018-08-12T13:06:50.730' AS DateTime))
GO
SET IDENTITY_INSERT [dbo].[UserTrackingSchedule] OFF
GO
INSERT [enum].[LogActionType] ([Id], [Name]) VALUES (0, N'Undefined')
GO
INSERT [enum].[LogActionType] ([Id], [Name]) VALUES (1, N'Login')
GO
INSERT [enum].[LogActionType] ([Id], [Name]) VALUES (2, N'Logoff')
GO
INSERT [enum].[LogActionType] ([Id], [Name]) VALUES (3, N'ChangeSettings')
GO
INSERT [enum].[LogActionType] ([Id], [Name]) VALUES (4, N'ChangeLocation')
GO
INSERT [enum].[LogActionType] ([Id], [Name]) VALUES (5, N'Unauthorized')
GO
INSERT [enum].[LogActionType] ([Id], [Name]) VALUES (100, N'Exception')
GO
SET IDENTITY_INSERT [dict].[CountryFinancialPeriod] ON 

GO
INSERT [dict].[CountryFinancialPeriod] ([Id], [CountryId], [DateStart], [DateEnd]) VALUES (1, 1, CAST(N'2018-01-01T00:00:00.000' AS DateTime), CAST(N'2019-12-31T00:00:00.000' AS DateTime))
GO
INSERT [dict].[CountryFinancialPeriod] ([Id], [CountryId], [DateStart], [DateEnd]) VALUES (2, 2, CAST(N'2018-04-06T00:00:00.000' AS DateTime), CAST(N'2018-04-05T00:00:00.000' AS DateTime))
GO
INSERT [dict].[CountryFinancialPeriod] ([Id], [CountryId], [DateStart], [DateEnd]) VALUES (3, 3, CAST(N'2018-01-01T00:00:00.000' AS DateTime), CAST(N'2019-12-31T00:00:00.000' AS DateTime))
GO
SET IDENTITY_INSERT [dict].[CountryFinancialPeriod] OFF
GO

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
